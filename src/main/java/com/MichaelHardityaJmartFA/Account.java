package com.MichaelHardityaJmartFA;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.MichaelHardityaJmartFA.dbjson.Serializable;
/**
 * Class for Account information, stores the account information
 * @author Michael Harditya
 *
 */
public class Account extends Serializable
{
    public String name;
    public String email;
    public String password;
    public Store store;
    public double balance;
    public static final String REGEX_EMAIL = "^[A-Za-z0-9&_*~]+(?:\\\\.[A-Za-z0-9&_*~]+)*@(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\\\\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?$";
    public static final String REGEX_PASSWORD = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[a-zA-Z\\\\d]{8,}$";
    /**
     * an Account information consist of the input parameter, and ID generated by {@link Serializable} class
     * , {@link Store} is also kept in here.
     * @param name user name of the Account
     * @param email user email of the Account
     * @param password the password, using hash function
     * @param balance balance of the Account
     */
    public Account(String name,String email,String password, double balance)
    {
        this.name = name;
        this.email = email;
        this.password = password;
        this.balance = balance;
    }
    /**
     * A method to read a part of Account information
     * @param content to be read
     * @return true if the content is on the information
     */
    public boolean read(String content)
    {
        return false;
    }
    /**
     * A method to show the Account information, used for debugging only
     * @return a String of Account information
     */
    public String toString()
    {
        return ("name: "+name+"\nemail: "+email+"\npassword: "+password);
    }
    /**
     * @deprecated used to validate the Account patterns, already implemented in higher class methods
     * @return true if it is a match for both email and password
     */
    public boolean validate(){
        Pattern patMail = Pattern.compile(REGEX_EMAIL);
        Pattern patPass = Pattern.compile(REGEX_PASSWORD);
        Matcher mail = patMail.matcher(this.email);
        Matcher pass = patPass.matcher(this.password);
        return (mail.find() && pass.find());
    }
}
